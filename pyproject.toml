[tool.poetry]
name = "legal-statute-analysis"
version = "3.0.0"
description = "法條考題智能對應系統 - 基於 LLM 的智能分析工具"
authors = ["LegalStatuteAnalysis Team <team@legalstatute.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<3.14"
# Core dependencies
rich = "^13.7.0"
click = "^8.1.7"
python-dotenv = "^1.0.0"
numpy = "^1.26.0"
pandas = "^2.0.0"
pydantic = "^2.0.0"

# LLM and AI dependencies
openai = "^1.0.0"
google-generativeai = "^0.3.0"
langchain = "^0.1.0"
langchain-openai = "^0.1.0"

# PDF processing (optional - can be removed if not needed)
mineru = {extras = ["core"], version = "^2.1.0", optional = true}

# Document processing
python-docx = "^1.2.0"
pillow = "^11.3.0"
markdown = "^3.5.0"

# GPU support (optional)
torch = {version = "^2.6.0", optional = true}
torchvision = {version = "^0.21.0", optional = true}
transformers = {version = "^4.30.0", optional = true}
weasyprint = "^66.0"
wkhtmltopdf = "^0.2"

[tool.poetry.extras]
pdf = ["mineru"]
gpu = ["torch", "torchvision", "transformers"]
all = ["mineru", "torch", "torchvision", "transformers"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"

[tool.poetry.scripts]
legal-analyze = "scripts.run_core_embedding:main"
legal-analyze-gemini = "scripts.run_core_with_gemini:main"
legal-convert-pdf = "scripts.convert_pdf:main"
legal-parse-llm = "scripts.run_llm_parsing:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "scripts"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

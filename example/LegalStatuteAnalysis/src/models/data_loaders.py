#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ê≥ïÊ¢ùËÄÉÈ°åÊô∫ËÉΩÂ∞çÊáâÁ≥ªÁµ± - Ë≥áÊñôËºâÂÖ•Âô®
Êèê‰æõÊ®ôÊ∫ñÂåñÁöÑË≥áÊñôËºâÂÖ•ÂíåËΩâÊèõÂäüËÉΩ
"""

import json
import pandas as pd
from pathlib import Path
from typing import List, Dict, Any, Optional
import logging

from .law_models import (
    LawArticle, ExamQuestion, QuestionType, SystemConfig
)

logger = logging.getLogger(__name__)


class LawArticleLoader:
    """Ê≥ïÊ¢ùË≥áÊñôËºâÂÖ•Âô®"""
    
    # CSV Ê¨Ñ‰ΩçÊò†Â∞Ñ
    COLUMN_MAPPING = {
        'Ê≥ïË¶è‰ª£Á¢º': 'law_code',
        'Ê≥ïË¶èÂêçÁ®±': 'law_name', 
        '‰øÆÊ≠£Êó•ÊúüÔºàÊ∞ëÂúãÔºâ': 'revision_date',
        'Ê≥ïË¶èÈ°ûÂà•': 'category',
        '‰∏ªÁÆ°Ê©üÈóú': 'authority',
        'Á´†ÁØÄÁ∑®Ëôü': 'chapter_no',
        'Á´†ÁØÄÊ®ôÈ°å': 'chapter_title',
        'Ê¢ùÊñá‰∏ªËôü': 'article_no_main',
        'Ê¢ùÊñáÊ¨°Ëôü': 'article_no_sub',
        'Ê¢ùÊñáÂÆåÊï¥ÂÖßÂÆπ': 'content'
    }
    
    @classmethod
    def load_from_csv(cls, csv_path: str) -> List[LawArticle]:
        """Âæû CSV Êñá‰ª∂ËºâÂÖ•Ê≥ïÊ¢ùË≥áÊñô"""
        try:
            df = pd.read_csv(csv_path)
            logger.info(f"üìä Âæû CSV ËºâÂÖ• {len(df)} Á≠ÜÊ≥ïÊ¢ùË≥áÊñô: {csv_path}")
            
            # ÈáçÂëΩÂêçÊ¨Ñ‰Ωç
            df_renamed = df.rename(columns=cls.COLUMN_MAPPING)
            
            articles = []
            for _, row in df_renamed.iterrows():
                article = LawArticle(
                    law_code=str(row['law_code']),
                    law_name=str(row['law_name']),
                    revision_date=str(row['revision_date']),
                    chapter_no=int(row['chapter_no']),
                    chapter_title=str(row['chapter_title']),
                    article_no_main=int(row['article_no_main']),
                    article_no_sub=int(row['article_no_sub']),
                    content=str(row['content']),
                    category=str(row.get('category', '')) if pd.notna(row.get('category')) else None,
                    authority=str(row.get('authority', '')) if pd.notna(row.get('authority')) else None
                )
                articles.append(article)
            
            logger.info(f"‚úÖ ÊàêÂäüËºâÂÖ• {len(articles)} Ê¢ùÊ≥ïË¶èÊ¢ùÊñá")
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå ËºâÂÖ•Ê≥ïÊ¢ùË≥áÊñôÂ§±Êïó: {e}")
            raise
    
    @classmethod
    def load_from_config(cls, config: SystemConfig) -> List[LawArticle]:
        """ÂæûÁ≥ªÁµ±ÈÖçÁΩÆËºâÂÖ•Ê≥ïÊ¢ùË≥áÊñô"""
        # È†êÁïôÂäüËÉΩÔºöÊú™‰æÜÂèØ‰ª•ÂæûÈÖçÁΩÆÁöÑÊ≥ïÊ¢ùÂÆöÁæ©Áõ¥Êé•ËºâÂÖ•
        # ÁõÆÂâç‰ªç‰ΩøÁî® CSV ÊñπÂºè
        csv_path = "results/law_articles.csv"  # È†êË®≠Ë∑ØÂæë
        return cls.load_from_csv(csv_path)


class ExamQuestionLoader:
    """ËÄÉÈ°åË≥áÊñôËºâÂÖ•Âô®"""
    
    @classmethod
    def load_from_json(cls, json_path: str) -> List[ExamQuestion]:
        """Âæû JSON Êñá‰ª∂ËºâÂÖ•ËÄÉÈ°åË≥áÊñô"""
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            logger.info(f"üìä Âæû JSON ËºâÂÖ•ËÄÉÈ°åË≥áÊñô: {json_path}")
            
            questions = []
            
            # ËºâÂÖ•Áî≥Ë´ñÈ°å
            essay_section = data.get('essay_section', {})
            for essay_q in essay_section.get('questions', []):
                question = ExamQuestion(
                    question_number=essay_q['question_number'],
                    content=essay_q['content'],
                    question_type=QuestionType.ESSAY,
                    options={},
                    correct_answer=None,
                    points=essay_q.get('points', 25),
                    section="essay"
                )
                questions.append(question)
            
            # ËºâÂÖ•ÈÅ∏ÊìáÈ°å
            mc_section = data.get('multiple_choice_section', {})
            for mc_q in mc_section.get('questions', []):
                question = ExamQuestion(
                    question_number=mc_q['question_number'],
                    content=mc_q['content'],
                    question_type=QuestionType.MULTIPLE_CHOICE,
                    options=mc_q.get('options', {}),
                    correct_answer=mc_q.get('correct_answer'),
                    points=mc_q.get('points', 2),
                    section="multiple_choice"
                )
                questions.append(question)
            
            logger.info(f"‚úÖ ÊàêÂäüËºâÂÖ• {len(questions)} ÈÅìËÄÉË©¶È°åÁõÆ")
            logger.info(f"   - Áî≥Ë´ñÈ°å: {len([q for q in questions if q.is_essay])} ÈÅì")
            logger.info(f"   - ÈÅ∏ÊìáÈ°å: {len([q for q in questions if q.is_multiple_choice])} ÈÅì")
            
            return questions
            
        except Exception as e:
            logger.error(f"‚ùå ËºâÂÖ•ËÄÉÈ°åË≥áÊñôÂ§±Êïó: {e}")
            raise
    
    @classmethod
    def load_from_config(cls, config: SystemConfig, exam_set_name: str) -> List[ExamQuestion]:
        """ÂæûÁ≥ªÁµ±ÈÖçÁΩÆËºâÂÖ•ÊåáÂÆöËÄÉË©¶ÈõÜÁöÑÈ°åÁõÆ"""
        exam_sets = config.exam_sets
        if exam_set_name not in exam_sets:
            raise ValueError(f"Êâæ‰∏çÂà∞ËÄÉË©¶ÈõÜ: {exam_set_name}")
        
        exam_config = exam_sets[exam_set_name]
        
        # Ê™¢Êü•ÊòØÂê¶ÊúâÂ∑≤Á∂ìËß£ÊûêÂ•ΩÁöÑ LLM ÁâàÊú¨
        llm_output_file = "results/exam_113_complete_llm_improved.json"
        if Path(llm_output_file).exists():
            logger.info("üéØ ‰ΩøÁî® LLM ÂÑ™ÂåñÁâàÊú¨ÁöÑËÄÉÈ°åË≥áÊñô")
            return cls.load_from_json(llm_output_file)
        
        # Âê¶Ââá‰ΩøÁî®ÈÖçÁΩÆ‰∏≠ÊåáÂÆöÁöÑÊñá‰ª∂
        output_file = exam_config.get('output_file')
        if output_file and Path(output_file).exists():
            return cls.load_from_json(output_file)
        
        raise FileNotFoundError(f"Êâæ‰∏çÂà∞ËÄÉÈ°åË≥áÊñôÊñá‰ª∂: {output_file}")


class DataRepository:
    """Ë≥áÊñôÂÄâÂ∫´ - Áµ±‰∏ÄÁÆ°ÁêÜÊâÄÊúâË≥áÊñôËºâÂÖ•"""
    
    def __init__(self, config: SystemConfig):
        self.config = config
        self._law_articles: Optional[List[LawArticle]] = None
        self._exam_questions: Optional[List[ExamQuestion]] = None
    
    @property
    def law_articles(self) -> List[LawArticle]:
        """Âª∂ÈÅ≤ËºâÂÖ•Ê≥ïÊ¢ùË≥áÊñô"""
        if self._law_articles is None:
            self._law_articles = LawArticleLoader.load_from_config(self.config)
        return self._law_articles
    
    @property  
    def exam_questions(self) -> List[ExamQuestion]:
        """Âª∂ÈÅ≤ËºâÂÖ•ËÄÉÈ°åË≥áÊñô"""
        if self._exam_questions is None:
            # È†êË®≠ËºâÂÖ•Á¨¨‰∏ÄÂÄãËÄÉË©¶ÈõÜ
            exam_set_names = list(self.config.exam_sets.keys())
            if not exam_set_names:
                raise ValueError("ÈÖçÁΩÆ‰∏≠Ê≤íÊúâÂÆöÁæ©ËÄÉË©¶ÈõÜ")
            
            first_exam_set = exam_set_names[0]
            self._exam_questions = ExamQuestionLoader.load_from_config(
                self.config, first_exam_set
            )
        return self._exam_questions
    
    def load_exam_set(self, exam_set_name: str) -> List[ExamQuestion]:
        """ËºâÂÖ•ÊåáÂÆöÁöÑËÄÉË©¶ÈõÜ"""
        return ExamQuestionLoader.load_from_config(self.config, exam_set_name)
    
    def reload_data(self) -> None:
        """ÈáçÊñ∞ËºâÂÖ•ÊâÄÊúâË≥áÊñô"""
        self._law_articles = None
        self._exam_questions = None
        logger.info("üîÑ Â∑≤Ê∏ÖÈô§Âø´ÂèñÔºå‰∏ãÊ¨°Â≠òÂèñÊôÇÂ∞áÈáçÊñ∞ËºâÂÖ•Ë≥áÊñô")
    
    def get_stats(self) -> Dict[str, Any]:
        """Áç≤ÂèñË≥áÊñôÁµ±Ë®à"""
        return {
            "law_article_count": len(self.law_articles),
            "exam_question_count": len(self.exam_questions),
            "essay_question_count": len([q for q in self.exam_questions if q.is_essay]),
            "mc_question_count": len([q for q in self.exam_questions if q.is_multiple_choice]),
            "law_codes": list(set(a.law_code for a in self.law_articles)),
            "exam_sets": list(self.config.exam_sets.keys())
        }
